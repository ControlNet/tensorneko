name: Release
on:
  push:
    branches:
      - "master"
jobs:
  check-version:
    name: Check Version
    runs-on: ubuntu-20.04
    outputs:
      local-version: ${{ steps.get-local-version.outputs.version }}
      remote-version: ${{ steps.get-remote-version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - name: Get Local Version
        id: get-local-version
        run: echo "version=$(cat version.txt)" >> $GITHUB_OUTPUT
      - name: Get Remote Version
        id: get-remote-version
        run: echo "version=$(curl -s https://pypi.org/pypi/tensorneko/json | jq -r '.info.version')" >> $GITHUB_OUTPUT

  build-web:
    name: Build Web
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: npm install and build
        working-directory: ./src/tensorneko_util/visualization/watcher/web
        run: |
          npm install
          npm run build
        env:
          CI: true

      - name: Print dist path
        working-directory: ./src/tensorneko_util/visualization/watcher/web
        run: |
          echo ----------dist-------
          ls -l dist
          echo ----------dist/assets-------
          ls -l dist/assets

  unittest:
    name: Unittest
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        torch-version: ["1.9.*", "1.10.*", "1.11.*", "1.12.*", "1.13.*"]
        lightning-version: ["1.7.*"]
        exclude:
          - python-version: "3.10"
            torch-version: "1.9.*"
          - python-version: "3.10"
            torch-version: "1.10.*"

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Install dependencies
        run: |
          pip install torch==${{ matrix.torch-version }}
          pip install lightning==${{ matrix.lightning-version }}
          pip install -r requirements_test.txt
          python init.py

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)/src" >> $GITHUB_ENV

      - name: Run Test
        run: python -m unittest discover test

  release:
    name: Release
    needs: [build-web, unittest, check-version]
    if: needs.check-version.outputs.local-version != needs.check-version.outputs.remote-version
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: npm install and build
        working-directory: ./src/tensorneko_util/visualization/watcher/web
        run: |
          npm install
          npm run build
        env:
          CI: true

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          python init.py

      - name: Build package for tensorneko_util
        run: python setup_util.py sdist bdist_wheel

      - name: Release tensorneko_util to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_UTIL_API_TOKEN }}

      - name: Clean build for tensorneko_util
        run: |
          rm -rf dist/
          rm -rf build/
          rm -rf src/tensorneko_util.egg-info/

      - name: Build package for tensorneko
        run: python setup.py sdist bdist_wheel

      - name: Release tensorneko to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Get the version
        run: |
          VER=$(cat version.txt)
          echo "VERSION=$VER" >> $GITHUB_ENV

      - name: Rebuild tensorneko_util
        run: python setup_util.py sdist bdist_wheel

      - name: Release to GitHub Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ env.VERSION }}"
          title: "[${{ env.VERSION }}] TensorNeko Release"
          prerelease: false
          files: "dist/*"
          draft: true
